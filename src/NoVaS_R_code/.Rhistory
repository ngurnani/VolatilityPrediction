temp
data_mat = matrix(unlist(data),nrow=2,ncol=100)
data_mat[1,]
data_mat[1,] - mean(data[1,])
mean(data_mat[1,])
val = mean(data_mat[1,])
data_mat[1,] - val
data_mat = matrix(unlist(data),nrow=2,ncol=100)
meanx = mean(data_mat[1,])
meany = mean(data_mat[2,])
data_mat[1,] = data_mat[1,] - meanx
data_mat[2,] = data_mat[2,] - meany
M = data_mat %*% t(data_mat)
M = M/99
M
cov_matrix
data_mat = matrix(unlist(data),nrow=2,ncol=100)
meanx = mean(data_mat[1,])
meany = mean(data_mat[2,])
data_mat[1,] = data_mat[1,] - meanx  # centered data
data_mat[2,] = data_mat[2,] - meany # cenetered data
M = data_mat %*% t(data_mat)
C = M/99 # sample covariance matrix
eigen(C)
eigenvalues = eigen(C)$values
eigenvectors = eigen(C)$vectors
eigenvalues[1]
pc1 = sqrt(eigenvalues[1])*eigenvectors[,1]
pc2 = sqrt(eigenvalues[2])*eigenvectors[,2] # principal component 2
P = matrix(c(pc1,pc2),nrow=2,ncol=2)
P
pc1
pc2
eigenvectors
eigenvectors %*% C
t(eigenvectors) %*% C %*% eigenvectors
t(eigenvectors) %*% C
temp = t(eigenvectors %*% C)
temp %*% eigenvectors
C
temp = eigenvectors %*% C
temp %*% t(eigenvectors)
M2 = t(eigenvectors) %*% data_mat
M2
M2 %*% t(M2)
(M2 %*% t(M2))/99
eigenvalues
D = (M2 %*% t(M2))/99 # due to some roundoff error the off-diagonal components are close but not exactly zero
D[1,2] = 0 # deals with very minor roundoff error
D[2,1] = 0 # deals with very minor roundoff error
# Clearly D is the diagonal matrix containing the eigenvalues of the sample covariance matrix
eigenvalues
D
total_var = sum(eigenvalues)
print("principal component 1")
print(pc1)
pc1
print("variance along its axis")
print(eigenvalues[1])
print("% of total variance")
print(explained_var1*100)
total_var = sum(eigenvalues)
explained_var1 = eigenvalues[1]/total_var # fraction of variance explained by first principal component
explained_var2 = eigenvalues[2]/total_var # fraction of variance explained by second principal component
print("principal component 1")
print(pc1)
print("variance along its axis")
print(eigenvalues[1])
print("% of total variance")
print(explained_var1*100)
print("principal component 2")
print(pc2)
print("variance along its axis")
print(eigenvalues[2])
print("% of total variance")
print(explained_var2*100)
print("principal component 1")
print(pc1)
print("variance along its axis")
print(eigenvalues[1])
print("% of total variance")
print(explained_var1*100)
print("principal component 2")
print(pc2)
print("variance along its axis")
print(eigenvalues[2])
print("% of total variance")
print(explained_var2*100)
require(astsa)
install.packages(astsa)
install.packages("astsa")
require(astsa)
plot(jj, type="o", ylab="Quarterly Earnings per Share")
plot(gtemp, type="o", ylab="Global Temperature Deviations")
plot(speech)
plot(nyse, ylab="NYSE Returns")
require(astsa)
plot(nyse, ylab="NYSE Returns")
par(mfrow = c(2,1)) # set up the graphics
plot(soi, ylab="", xlab="", main="Southern Oscillation Index")
plot(rec, ylab="", xlab="", main="Recruitment")
par(mfrow=c(2,1), mar=c(3,2,1,0)+.5, mgp=c(1.6,.6,0))
ts.plot(fmri1[,2:5], col=1:4, ylab="BOLD", xlab="", main="Cortex")
ts.plot(fmri1[,6:9], col=1:4, ylab="BOLD", xlab="", main="Thalamus &
Cerebellum")
mtext("Time (1 pt = 2 sec)", side=1, line=2)
require(astsa)
par(mfrow=c(2,1), mar=c(3,2,1,0)+.5, mgp=c(1.6,.6,0))
ts.plot(fmri1[,2:5], col=1:4, ylab="BOLD", xlab="", main="Cortex")
ts.plot(fmri1[,6:9], col=1:4, ylab="BOLD", xlab="", main="Thalamus &
Cerebellum")
mtext("Time (1 pt = 2 sec)", side=1, line=2)
par(mfrow=c(2,1))
plot(EQ5, main="Earthquake")
plot(EXP6, main="Explosion")
w = rnorm(500,0,1) # 500 N(0,1) variates
v = filter(w, sides=2, filter=rep(1/3,3)) # moving average
par(mfrow=c(2,1))
plot.ts(w, main="white noise")
plot.ts(v, ylim=c(-3,3), main="moving average")
w = rnorm(550,0,1) # 50 extra to avoid startup problems
x = filter(w, filter=c(1,-.9), method="recursive")[-(1:50)]
plot.ts(x, main="autoregression")
set.seed(154) # so you can reproduce the results
w = rnorm(200,0,1); x = cumsum(w) # two commands in one line
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="random walk", ylab='') lines(x, col=4); abline(h=0, col=4, lty=2)
abline(a=0, b=.2, lty=2)
plot.ts(xd, ylim=c(-5,55), main="random walk", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2)
abline(a=0, b=.2, lty=2)
cs = 2*cos(2*pi*1:500/50 + .6*pi);  w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
plot.ts(cs, main=expression(2*cos(2*pi*t/50+.6*pi)))
plot.ts(cs+w, main=expression(2*cos(2*pi*t/50+.6*pi) + N(0,1)))
plot.ts(cs+5*w, main=expression(2*cos(2*pi*t/50+.6*pi) + N(0,25)))
set.seed(90210)
x = rnorm(100)
y = lag(x,-5) + rnorm(100)
ccf(x,y, ylab='CCovF', type='covariance')
set.seed(101010)
x1 = 2*rbinom(11, 1, .5) - 1
x2 = 2*rbinom(101, 1, .5) - 1
y1 = 5 + filter(x1, sides=1, filter=c(1,-.7))[-1]
y2 = 5 + filter(x2, sides=1, filter=c(1,-.7))[-1]
plot.ts(y1, type='s') # not shown
plot.ts(y2, type='s') # not shown âˆš
plot.ts(y1, type='s') # not shown
plot.ts(y2, type='s') # not shown
acf(y1, lag.max=4, plot=FALSE)
acf(y2, lag.max=4, plot=FALSE)
t = seq(100)
t
bt = 2*t
bt
require("TTR")
install.packages("TTR")
require(TTR)
require(smooth)
movavg()?
?
q
?movavg()
install.packages("forecast")
library(forecast)
install.packages(c("assertthat", "backports", "boot", "car", "checkmate", "circular", "cluster", "data.table", "digest", "ellipse", "evaluate", "foreign", "formatR", "Formula", "gridExtra", "Hmisc", "htmlTable", "htmltools", "ISLR", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "markdown", "MASS", "Matrix", "mgcv", "nlme", "pbkrtest", "quantreg", "Rcpp", "RcppEigen", "reshape2", "rJava", "rmarkdown", "rpart", "rprojroot", "scales", "SparseM", "stringi", "stringr", "survival", "tibble", "viridis", "XLConnect", "XLConnectJars", "yaml"))
# textbook R package
require(astsa)
x1 = 2*cos(2*pi*1:100*6/100) + 3*sin(2*pi*1:100*6/100)
x2 = 4*cos(2*pi*1:100*10/100) + 5*sin(2*pi*1:100*10/100)
x3 = 6*cos(2*pi*1:100*40/100) + 7*sin(2*pi*1:100*40/100)
x = x1 + x2 + x3
par(mfrow=c(2,2))
plot.ts(x1, ylim=c(-10,10), main=expression(omega==6/100~~~A^2==13))
plot.ts(x2, ylim=c(-10,10), main=expression(omega==10/100~~~A^2==41))
plot.ts(x3, ylim=c(-10,10), main=expression(omega==40/100~~~A^2==85))
plot.ts(x,  ylim=c(-16,16), main="sum")
P = Mod(2*fft(x)/100)^2
Fr = 0:99/100
plot(Fr, P, type="o", xlab="frequency", ylab="periodogram")
ma1.model = list(ma=-0.95)
mu = 1
set.seed(123)
ma1.gauss = mu + arima.sim(model=ma1.model,n=200)
ar(ma1.gauss)
AIC()?
?
q()
?AIC
AIC(ar(ma1.gauss))
temp = ar(ma1.gauss)
temp$aic
require(FitAR)
require(FitAR)
install.packages(c("cluster", "lmtest", "Matrix", "mgcv", "quantreg", "RcppArmadillo", "RcppEigen", "XLConnect", "XLConnectJars", "xts"))
require(FitAR)
library(bestglm)
install.packages("bestglm", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(FitAR)
temp = SelectModel(ma1.gauss, ARModel='AR', Criterion="AIC", Best=3)
temp
temp = SelectModel(ma1.gauss, ARModel='AR', Criterion="AIC", Best=5)
temp
temp2 = SelectModel(ma1.gauss, ARModel='AR', Criterion="BIC", Best=5)
temp2
plot(cars)
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
par(mfrow=c(3,1))
acf(ar1.100, lag.max=100)
acf(ar1.500, lag.max=500)
acf(ar1.1000, lag.max=1000)
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
par(mfrow=c(3,1))
acf(ar1.100, lag.max=100)
acf(ar1.500, lag.max=500)
acf(ar1.1000, lag.max=1000)
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
par(mfrow=c(3,1))
acf(ar1.100, lag.max=100)
acf(ar1.500, lag.max=500)
acf(ar1.1000, lag.max=1000)
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
acf(ar1.100, lag.max=100)
acf(ar1.500, lag.max=500)
acf(ar1.1000, lag.max=1000)
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
acf(ar1.100, lag.max=100)
acf(ar1.500, lag.max=500)
acf(ar1.1000, lag.max=1000)
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
acf(ar1.100, lag.max=100, main='ACF plot for AR(1) with n = 100')
acf(ar1.500, lag.max=500, main='ACF plot for AR(1) with n = 500')
acf(ar1.1000, lag.max=1000, main='ACF plot for AR(1) with n = 1000')
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
acf(ar1.100, lag.max=100, main='ACF plot for AR(1) with n = 100')
acf(ar1.500, lag.max=500, main='ACF plot for AR(1) with n = 500')
acf(ar1.1000, lag.max=1000, main='ACF plot for AR(1) with n = 1000')
# AR(1) with phi=0.9
ar1.100 = arima.sim(list(order=c(1,0,0), ar=0.9),n=100)
ar1.500 = arima.sim(list(order=c(1,0,0), ar=0.9),n=500)
ar1.1000 = arima.sim(list(order=c(1,0,0), ar=0.9),n=1000)
acf(ar1.100, lag.max=100, main='ACF plot for AR(1) with n = 100')
acf(ar1.500, lag.max=500, main='ACF plot for AR(1) with n = 500')
acf(ar1.1000, lag.max=1000, main='ACF plot for AR(1) with n = 1000')
set.seed(123)
w = rnorm(250,0,1) # 50 extra to avoid startup problems
x = filter(w, filter=c(0.75), method='recursive')[-(1:50)]
plot.ts(x,main='autoregression')
ar1.model = list(ar=0.75)
mu = 1
set.seed(123)
ar1.gauss = mu + arima.sim(model=ar1.model,n=200)
plot.ts(ar1.gauss)
plot.ts(x,main='autoregression')
ar1.gauss = filter(w, filter=c(0.75), method='recursive')[-(1:50)]
acf(ar1.gauss, lag.max=25, main='ACF plot of Gaussian AR(1) Model')
pacf(ar1.gauss, lag.max=25, main='PACF plot of Gaussian AR(1) Model')
data <- data.frame(order=numeric(),method=character(),p_val=numeric())
View(data)
View(data)
x_bar = mean(ar1.gauss)
sd_hat = sd(ar1.gauss)
ma1.model = list(ma=-0.95)
mu = 1
set.seed(123)
ma1.gauss = mu + arima.sim(model=ma1.model,n=200)
require(FitAR)
AIC_models = SelectModel(ma1.gauss, ARModel='AR', Criterion="AIC", Best=5)
BIC_models = SelectModel(ma1.gauss, ARModel='AR', Criterion="BIC", Best=5)
AIC_models
BIC_models
disp(AIC_models)
print(AIC_models)
ma1.model = list(ma=-0.95)
mu = 1
set.seed(123)
ma1.gauss = mu + arima.sim(model=ma1.model,n=200)
require(FitAR)
AIC_models = SelectModel(ma1.gauss, ARModel='AR', Criterion="AIC", Best=5)
BIC_models = SelectModel(ma1.gauss, ARModel='AR', Criterion="BIC", Best=5)
print(AIC_models)
print(BIC_models)
for (i in 1:3) {
for (j in 1:3) {
print(i)
print(j)
}
}
for (i in 1:3) {
for (j in 1:3) {
print(order_vec[i])
print(method_vec[j])
}
}
order_vec = c(1,2,3)
method_vec = c("yw", "mle", "ols")
for (i in 1:3) {
for (j in 1:3) {
print(order_vec[i])
print(method_vec[j])
}
}
temp = ar(ar1.gauss,aic=FALSE, order.max = 1,method = "yw")
set.seed(123)
w = rnorm(250,0,1) # 50 extra to avoid startup problems
ar1.gauss = filter(w, filter=c(0.75), method='recursive')[-(1:50)]
temp = ar(ar1.gauss,aic=FALSE, order.max = 1,method = "yw")
temp$order
temp$ar
temp$x.mean
temp
data <- data.frame(order=numeric(),method=character(),p_val=numeric())
data$order = 10
data$order = 10.0
data[order] = 10
data_temp = data
data_temp = rbind(data_temp, c(10,"yw",0.034))
data_temp
data
data = rbind(data,c(10,"yw",0.04))
data
data <- data.frame(order=numeric(),method=character(),p_val=numeric())
order_vec = c(1,2,3)
method_vec = c("yw", "mle", "ols")
temp
temp$ar
temp$var.pred
data <- data.frame(order=numeric(),coeff=numeric(), method=character(),p_val=numeric())
order_vec = c(1,2,3)
method_vec = c("yw", "mle", "ols")
for (i in 1:3) {
for (j in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=order_vec[i],method=method_vec[j])
temp_order = temp$order
temp_coeff = temp$ar
temp_pval = 1000
data = rbind(data, data.frame(order=temp_oder,coeff=temp_coeff, method=method_vec[j],p_val = temp_pval))
}
}
for (i in 1:3) {
for (j in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=order_vec[i],method=method_vec[j])
temp_order = temp$order
temp_coeff = temp$ar
temp_pval = 1000
data = rbind(data, data.frame(order=temp_order,coeff=temp_coeff, method=method_vec[j],p_val = temp_pval))
}
}
data
data <- data.frame(order=numeric(),coeff=numeric(), method=character(),p_val=numeric())
order_vec = c(1,2,3)
method_vec = c("yw", "mle", "ols")
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=1,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar
temp_pval = 1000
data = rbind(data, data.frame(order=temp_order,coeff=temp_coeff, method=method_vec[i],p_val = temp_pval))
}
data
data_1 <- data.frame(order=numeric(),coeff=numeric(), method=character())
data_2 <- data.frame(order=numeric(),coeff=numeric(), method=character())
data_3 <- data.frame(order=numeric(),coeff=numeric(), method=character())
method_vec = c("yw", "mle", "ols")
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=1,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar
temp_pval = 1000
data_1 = rbind(data_1, data.frame(order=temp_order,coeff=temp_coeff,method=method_vec[i]))
}
data_1
temp
data_1 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
data_2 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
data_3 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
method_vec = c("yw", "mle", "ols")
# AR(1)
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=1,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar
temp_var = temp$var.pred
data_1 = rbind(data_1, data.frame(order=temp_order,coeff=temp_coeff,method=method_vec[i]), var_estimate = temp_var)
}
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=1,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar
temp_var = temp$var.pred
data_1 = rbind(data_1, data.frame(order=temp_order,coeff=temp_coeff,method=method_vec[i],var_estimate = temp_var))
}
data_1 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
data_2 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
data_3 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
method_vec = c("yw", "mle", "ols")
# AR(1)
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=1,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar
temp_var = temp$var.pred
data_1 = rbind(data_1,data.frame(order=temp_order,coeff=temp_coeff,method=method_vec[i],var_estimate = temp_var))
}
data_1
temp = ar(ar1.gauss,aic=FALSE,order.max=2,method='yw')
temp
temp$ar
temp = ar(ar1.gauss,aic=FALSE,order.max=3,method='yw')
temp$ar
temp$ar[1]
data_1 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
data_2 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
data_3 <- data.frame(order=numeric(),coeff=numeric(), method=character(), var_estimate = numeric())
method_vec = c("yw", "mle", "ols")
# AR(1)
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=1,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar
temp_var = temp$var.pred
data_1 = rbind(data_1,data.frame(order=temp_order,coeff=temp_coeff,method=method_vec[i],var_estimate = temp_var))
}
print(data_1)
# AR(2)
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=2,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar[1]
temp_var = temp$var.pred
data_2 = rbind(data_2,data.frame(order=temp_order,coeff=temp_coeff,method=method_vec[i],var_estimate = temp_var))
}
print(data_2)
# AR(3)
for (i in 1:3) {
temp = ar(ar1.gauss,aic=FALSE,order.max=3,method=method_vec[i])
temp_order = temp$order
temp_coeff = temp$ar[1]
temp_var = temp$var.pred
data_3 = rbind(data_3,data.frame(order=temp_order,coeff=temp_coeff,method=method_vec[i],var_estimate = temp_var))
}
print(data_3)
install.packages('devtools')
# or devtools::install_local('IRkernel-master.tar.gz')
IRkernel::installspec()  # to register the kernel in the current R installation
### code to load in S&P500 returns data ###
setwd("~/Dropbox/Code/VolatilityPrediction/src/NoVaS_R_code")
sp500 <- read.table("sp500returns.csv", header=F, sep=',')
xx <- sp500$V2
xx <- (xx - mean(xx, na.rm = T))/sd(xx, na.rm = T)
VARSTABdp<-function(xx, p)
{ # xx is financial returns series (percentage returns)
# the output is the transformed series using simple NoVaS
# note that first p-1 entries of the output are unreliable
# Here we have is average of p values (not p+1 as in the 2007 paper)
# i.e., if the algorithm below indicates p=10, then it is a_0 and p=9 more
n <- length(xx)
yy <- c(1:(2 * p + n)) * 0
yy[(2 * p + 1):(2 * p + n)] <- xx
yy <- as.ts(yy)
kk <- 0 * yy
for(i in 0:(p - 1)) {
kk <- kk + lag(yy^2,  - i)
}
zz <- yy/sqrt(kk/p)    # zz_as.vector(zz)
#   zz_zz[(2*p+1):(2*p+n)]
zz <- na.omit(zz)
zz[1] <- sign(zz[1])
zz
}
KURTOSIS<-function(x)
{ # regular definition
mm <- mean(x, na.rm = T)
s2 <- mean((x - mm)^2, na.rm = T)
kk <- mean((x - mm)^4, na.rm = T)
kk <- kk/s2^2
kk
}
temp = VARSTABdp(xx,16)
KURTOSIS(temp)
length(temp)
temp
temp[-1]
temp[17190]
temp[17199]
temp[17200]
temp[17190:17200]
temp[17180:17200]
length(temp)
temp[1:16]
temp[17]
